// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToolTrack.Infrastructure.Persistence;

#nullable disable

namespace ToolTrack.Infrastructure.Migrations
{
    [DbContext(typeof(ToolTrackDbContext))]
    [Migration("20250719040438_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ToolTrack.Domain.Entities.CategoriaHerramienta", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategoria"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCategoria");

                    b.ToTable("CategoriasHerramienta");

                    b.HasData(
                        new
                        {
                            IdCategoria = 1,
                            Descripcion = "Herramientas de perforación",
                            Nombre = "Taladros"
                        },
                        new
                        {
                            IdCategoria = 2,
                            Descripcion = "Herramientas de golpe",
                            Nombre = "Martillos"
                        });
                });

            modelBuilder.Entity("ToolTrack.Domain.Entities.Herramienta", b =>
                {
                    b.Property<int>("IdHerramienta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHerramienta"));

                    b.Property<string>("CodigoInterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCategoria")
                        .HasColumnType("int");

                    b.Property<int>("IdUbicacion")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdHerramienta");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdUbicacion");

                    b.ToTable("Herramientas");

                    b.HasData(
                        new
                        {
                            IdHerramienta = 1,
                            CodigoInterno = "TB500",
                            Estado = "Disponible",
                            FechaRegistro = new DateTime(2025, 7, 19, 4, 4, 37, 686, DateTimeKind.Utc).AddTicks(191),
                            IdCategoria = 1,
                            IdUbicacion = 1,
                            Nombre = "Taladro Bosch"
                        },
                        new
                        {
                            IdHerramienta = 2,
                            CodigoInterno = "MS100",
                            Estado = "Disponible",
                            FechaRegistro = new DateTime(2025, 7, 19, 4, 4, 37, 686, DateTimeKind.Utc).AddTicks(194),
                            IdCategoria = 2,
                            IdUbicacion = 2,
                            Nombre = "Martillo Stanley"
                        });
                });

            modelBuilder.Entity("ToolTrack.Domain.Entities.Prestamo", b =>
                {
                    b.Property<int>("IdPrestamo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPrestamo"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaDevolucion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaPrestamo")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdHerramienta")
                        .HasColumnType("int");

                    b.Property<int>("IdTrabajador")
                        .HasColumnType("int");

                    b.Property<string>("Observacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPrestamo");

                    b.HasIndex("IdHerramienta");

                    b.HasIndex("IdTrabajador");

                    b.ToTable("Prestamos");
                });

            modelBuilder.Entity("ToolTrack.Domain.Entities.Trabajador", b =>
                {
                    b.Property<int>("IdTrabajador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTrabajador"));

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTrabajador");

                    b.ToTable("Trabajadores");

                    b.HasData(
                        new
                        {
                            IdTrabajador = 1,
                            Cargo = "Operario",
                            Documento = "12345678",
                            Nombres = "Juan Pérez"
                        },
                        new
                        {
                            IdTrabajador = 2,
                            Cargo = "Supervisor",
                            Documento = "87654321",
                            Nombres = "Ana Gómez"
                        });
                });

            modelBuilder.Entity("ToolTrack.Domain.Entities.Ubicacion", b =>
                {
                    b.Property<int>("IdUbicacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUbicacion"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUbicacion");

                    b.ToTable("Ubicaciones");

                    b.HasData(
                        new
                        {
                            IdUbicacion = 1,
                            Descripcion = "Principal",
                            Nombre = "Almacén Central"
                        },
                        new
                        {
                            IdUbicacion = 2,
                            Descripcion = "Secundario",
                            Nombre = "Almacén Secundario"
                        });
                });

            modelBuilder.Entity("ToolTrack.Domain.Entities.UsuarioSistema", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuario"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("ClaveHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUsuario");

                    b.ToTable("UsuariosSistema");

                    b.HasData(
                        new
                        {
                            IdUsuario = 1,
                            Activo = true,
                            ClaveHash = "admin123",
                            NombreUsuario = "admin",
                            Rol = "Admin"
                        },
                        new
                        {
                            IdUsuario = 2,
                            Activo = true,
                            ClaveHash = "user123",
                            NombreUsuario = "user",
                            Rol = "User"
                        });
                });

            modelBuilder.Entity("ToolTrack.Domain.Entities.Herramienta", b =>
                {
                    b.HasOne("ToolTrack.Domain.Entities.CategoriaHerramienta", "Categoria")
                        .WithMany("Herramientas")
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolTrack.Domain.Entities.Ubicacion", "Ubicacion")
                        .WithMany("Herramientas")
                        .HasForeignKey("IdUbicacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Ubicacion");
                });

            modelBuilder.Entity("ToolTrack.Domain.Entities.Prestamo", b =>
                {
                    b.HasOne("ToolTrack.Domain.Entities.Herramienta", "Herramienta")
                        .WithMany("Prestamos")
                        .HasForeignKey("IdHerramienta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToolTrack.Domain.Entities.Trabajador", "Trabajador")
                        .WithMany("Prestamos")
                        .HasForeignKey("IdTrabajador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Herramienta");

                    b.Navigation("Trabajador");
                });

            modelBuilder.Entity("ToolTrack.Domain.Entities.CategoriaHerramienta", b =>
                {
                    b.Navigation("Herramientas");
                });

            modelBuilder.Entity("ToolTrack.Domain.Entities.Herramienta", b =>
                {
                    b.Navigation("Prestamos");
                });

            modelBuilder.Entity("ToolTrack.Domain.Entities.Trabajador", b =>
                {
                    b.Navigation("Prestamos");
                });

            modelBuilder.Entity("ToolTrack.Domain.Entities.Ubicacion", b =>
                {
                    b.Navigation("Herramientas");
                });
#pragma warning restore 612, 618
        }
    }
}
